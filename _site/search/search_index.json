{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"README-repo/","text":"locallhost A simple http server that echoes client http request information. Also provides links to localhost ( 127.0.0.1 , [::1] ) for easy navigation to locally hosted projects. Table of Contents - [locallhost](#locallhost) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Development](#development) - [Contributing](#contributing) - [License](#license) Key Features Show request IP address and port /ip endpoint provides raw request IP address Show entire HTTP request header /json endpoint provides request info formatted as JSON ipv4+ipv6 localhost links Quick links for port 80 Customizable port number Webpage < 6kB , Binary < 10MB , Docker image < 13MB Technical Overview Uses Golang's net/http and `` packages to display request info. Installation go install https://github.com/B13rg/locallhost.git@main Getting Started Configuration \u276f ./locallhost -h \u2500\u256f Start a server on a configured port that returns info about http requests. Usage: locallhost [flags] locallhost [command] Available Commands: completion Generate the autocompletion script for the specified shell help Help about any command version Get version Flags: --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for locallhost -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to Use \"locallhost [command] --help\" for more information about a command. Deployment Natively go build ./locallhost ./locallhost Docker docker-compose -f ./docker/compose.yml build docker-compose -f ./docker/compose.yml up -d Documentation and Additional Resources See ./docs folder. Most if not all of the documentation is generated from the golang code. Links Inspiration: https://locallhost.com Development Uses Golang 1.24.2 . Contributing Open an issue or PR. License MIT","title":"Repo Readme"},{"location":"README-repo/#locallhost","text":"A simple http server that echoes client http request information. Also provides links to localhost ( 127.0.0.1 , [::1] ) for easy navigation to locally hosted projects. Table of Contents - [locallhost](#locallhost) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Development](#development) - [Contributing](#contributing) - [License](#license)","title":"locallhost"},{"location":"README-repo/#key-features","text":"Show request IP address and port /ip endpoint provides raw request IP address Show entire HTTP request header /json endpoint provides request info formatted as JSON ipv4+ipv6 localhost links Quick links for port 80 Customizable port number Webpage < 6kB , Binary < 10MB , Docker image < 13MB","title":"Key Features"},{"location":"README-repo/#technical-overview","text":"Uses Golang's net/http and `` packages to display request info.","title":"Technical Overview"},{"location":"README-repo/#installation","text":"go install https://github.com/B13rg/locallhost.git@main","title":"Installation"},{"location":"README-repo/#getting-started","text":"","title":"Getting Started"},{"location":"README-repo/#configuration","text":"\u276f ./locallhost -h \u2500\u256f Start a server on a configured port that returns info about http requests. Usage: locallhost [flags] locallhost [command] Available Commands: completion Generate the autocompletion script for the specified shell help Help about any command version Get version Flags: --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for locallhost -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to Use \"locallhost [command] --help\" for more information about a command.","title":"Configuration"},{"location":"README-repo/#deployment","text":"","title":"Deployment"},{"location":"README-repo/#natively","text":"go build ./locallhost ./locallhost","title":"Natively"},{"location":"README-repo/#docker","text":"docker-compose -f ./docker/compose.yml build docker-compose -f ./docker/compose.yml up -d","title":"Docker"},{"location":"README-repo/#documentation-and-additional-resources","text":"See ./docs folder. Most if not all of the documentation is generated from the golang code.","title":"Documentation and Additional Resources"},{"location":"README-repo/#links","text":"Inspiration: https://locallhost.com","title":"Links"},{"location":"README-repo/#development","text":"Uses Golang 1.24.2 .","title":"Development"},{"location":"README-repo/#contributing","text":"Open an issue or PR.","title":"Contributing"},{"location":"README-repo/#license","text":"MIT","title":"License"},{"location":"cmd/locallhost/","text":"locallhost Run locallhost server Synopsis Start a server on a configured port that returns info about http requests. locallhost [flags] Options --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for locallhost -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to SEE ALSO locallhost version - Get version Auto generated by spf13/cobra on 18-Aug-2025","title":"root"},{"location":"cmd/locallhost/#locallhost","text":"Run locallhost server","title":"locallhost"},{"location":"cmd/locallhost/#synopsis","text":"Start a server on a configured port that returns info about http requests. locallhost [flags]","title":"Synopsis"},{"location":"cmd/locallhost/#options","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for locallhost -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to","title":"Options"},{"location":"cmd/locallhost/#see-also","text":"locallhost version - Get version","title":"SEE ALSO"},{"location":"cmd/locallhost/#auto-generated-by-spf13cobra-on-18-aug-2025","text":"","title":"Auto generated by spf13/cobra on 18-Aug-2025"},{"location":"cmd/locallhost_version/","text":"locallhost version Get version Synopsis Get the current version of tool locallhost version [flags] Options -h, --help help for version Options inherited from parent commands --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to SEE ALSO locallhost - Run locallhost server Auto generated by spf13/cobra on 18-Aug-2025","title":"version"},{"location":"cmd/locallhost_version/#locallhost-version","text":"Get version","title":"locallhost version"},{"location":"cmd/locallhost_version/#synopsis","text":"Get the current version of tool locallhost version [flags]","title":"Synopsis"},{"location":"cmd/locallhost_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"cmd/locallhost_version/#options-inherited-from-parent-commands","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to","title":"Options inherited from parent commands"},{"location":"cmd/locallhost_version/#see-also","text":"locallhost - Run locallhost server","title":"SEE ALSO"},{"location":"cmd/locallhost_version/#auto-generated-by-spf13cobra-on-18-aug-2025","text":"","title":"Auto generated by spf13/cobra on 18-Aug-2025"},{"location":"godoc/cmd/","text":"cmd import \"github.com/b13rg/locallhost/cmd\" Defines the cli-interface commands available to the user. Index Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp Variables RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"locallhost\", Short: \"Run locallhost server\", Long: `Start a server on a configured port that returns info about http requests.`, Run: func(cmd *cobra.Command, args []string) { port := RootConfig.Port if port <= 0 { port = 8080 log.Warn().Msgf(\"Invalid port num %d, defaulting to %d\", RootConfig.Port, port) } logInterfaces(port) server.Serve(port) }, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, } func Colorize func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function. func ConfigureLogger func ConfigureLogger(debug bool) func Execute func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd. func InitConfig func InitConfig() InitConfig reads in config file and ENV variables if set. func ProfilingFinalizer func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured. func ProfilingInitializer func ProfilingInitializer() Sets up program profiling. func SetupLogger func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting. type CmdRootOptions Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File // HTTP port to listen on Port int } var RootConfig CmdRootOptions type Stamp type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"cmd"},{"location":"godoc/cmd/#cmd","text":"import \"github.com/b13rg/locallhost/cmd\" Defines the cli-interface commands available to the user.","title":"cmd"},{"location":"godoc/cmd/#index","text":"Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp","title":"Index"},{"location":"godoc/cmd/#variables","text":"RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"locallhost\", Short: \"Run locallhost server\", Long: `Start a server on a configured port that returns info about http requests.`, Run: func(cmd *cobra.Command, args []string) { port := RootConfig.Port if port <= 0 { port = 8080 log.Warn().Msgf(\"Invalid port num %d, defaulting to %d\", RootConfig.Port, port) } logInterfaces(port) server.Serve(port) }, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, }","title":"Variables"},{"location":"godoc/cmd/#func-colorize","text":"func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function.","title":"func Colorize"},{"location":"godoc/cmd/#func-configurelogger","text":"func ConfigureLogger(debug bool)","title":"func ConfigureLogger"},{"location":"godoc/cmd/#func-execute","text":"func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd.","title":"func Execute"},{"location":"godoc/cmd/#func-initconfig","text":"func InitConfig() InitConfig reads in config file and ENV variables if set.","title":"func InitConfig"},{"location":"godoc/cmd/#func-profilingfinalizer","text":"func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured.","title":"func ProfilingFinalizer"},{"location":"godoc/cmd/#func-profilinginitializer","text":"func ProfilingInitializer() Sets up program profiling.","title":"func ProfilingInitializer"},{"location":"godoc/cmd/#func-setuplogger","text":"func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting.","title":"func SetupLogger"},{"location":"godoc/cmd/#type-cmdrootoptions","text":"Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File // HTTP port to listen on Port int } var RootConfig CmdRootOptions","title":"type CmdRootOptions"},{"location":"godoc/cmd/#type-stamp","text":"type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"type Stamp"},{"location":"godoc/server/","text":"server import \"github.com/b13rg/locallhost/pkg/server\" Index func IndexTemplateString() string func Serve(port int) type RequestResponse func ExtractRequestData(req *http.Request) *RequestResponse func IndexTemplateString func IndexTemplateString() string Returns the html template string for the index page. func Serve func Serve(port int) Start serving on specified port. type RequestResponse Contains the data extracted from the request and returned to the user. type RequestResponse struct { // IP address of the remote client RemoteAddr string `json:\"remoteAddress\"` // Port of the remote client RemotePort string `json:\"remotePort\"` // Host header Host string `json:\"host\"` // Request method Method string `json:\"method\"` // Request protocol Proto string `json:\"protocol\"` // Request headers Header http.Header `json:\"header\"` } func ExtractRequestData func ExtractRequestData(req *http.Request) *RequestResponse","title":"server"},{"location":"godoc/server/#server","text":"import \"github.com/b13rg/locallhost/pkg/server\"","title":"server"},{"location":"godoc/server/#index","text":"func IndexTemplateString() string func Serve(port int) type RequestResponse func ExtractRequestData(req *http.Request) *RequestResponse","title":"Index"},{"location":"godoc/server/#func-indextemplatestring","text":"func IndexTemplateString() string Returns the html template string for the index page.","title":"func IndexTemplateString"},{"location":"godoc/server/#func-serve","text":"func Serve(port int) Start serving on specified port.","title":"func Serve"},{"location":"godoc/server/#type-requestresponse","text":"Contains the data extracted from the request and returned to the user. type RequestResponse struct { // IP address of the remote client RemoteAddr string `json:\"remoteAddress\"` // Port of the remote client RemotePort string `json:\"remotePort\"` // Host header Host string `json:\"host\"` // Request method Method string `json:\"method\"` // Request protocol Proto string `json:\"protocol\"` // Request headers Header http.Header `json:\"header\"` }","title":"type RequestResponse"},{"location":"godoc/server/#func-extractrequestdata","text":"func ExtractRequestData(req *http.Request) *RequestResponse","title":"func ExtractRequestData"}]}