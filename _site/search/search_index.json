{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"README-repo/","text":"locallhost A template repo for a Golang Project. Table of Contents - [locallhost](#locallhost) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Other Docs](#other-docs) - [History](#history) - [Alternatives](#alternatives) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license) Key Features Technical Overview Installation Getting Started Configuration Deployment Documentation and Additional Resources Links Other Docs History Alternatives Development Setup Tests Build Troubleshooting Contributing License","title":"Repo Readme"},{"location":"README-repo/#locallhost","text":"A template repo for a Golang Project. Table of Contents - [locallhost](#locallhost) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Other Docs](#other-docs) - [History](#history) - [Alternatives](#alternatives) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license)","title":"locallhost"},{"location":"README-repo/#key-features","text":"","title":"Key Features"},{"location":"README-repo/#technical-overview","text":"","title":"Technical Overview"},{"location":"README-repo/#installation","text":"","title":"Installation"},{"location":"README-repo/#getting-started","text":"","title":"Getting Started"},{"location":"README-repo/#configuration","text":"","title":"Configuration"},{"location":"README-repo/#deployment","text":"","title":"Deployment"},{"location":"README-repo/#documentation-and-additional-resources","text":"","title":"Documentation and Additional Resources"},{"location":"README-repo/#links","text":"","title":"Links"},{"location":"README-repo/#other-docs","text":"","title":"Other Docs"},{"location":"README-repo/#history","text":"","title":"History"},{"location":"README-repo/#alternatives","text":"","title":"Alternatives"},{"location":"README-repo/#development","text":"","title":"Development"},{"location":"README-repo/#setup","text":"","title":"Setup"},{"location":"README-repo/#tests","text":"","title":"Tests"},{"location":"README-repo/#build-troubleshooting","text":"","title":"Build Troubleshooting"},{"location":"README-repo/#contributing","text":"","title":"Contributing"},{"location":"README-repo/#license","text":"","title":"License"},{"location":"cmd/locallhost/","text":"locallhost Run locallhost server Synopsis Start a server on a configured port that returns info about https requests. locallhost [flags] Options --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for locallhost -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to SEE ALSO locallhost version - Get version Auto generated by spf13/cobra on 18-Aug-2025","title":"root"},{"location":"cmd/locallhost/#locallhost","text":"Run locallhost server","title":"locallhost"},{"location":"cmd/locallhost/#synopsis","text":"Start a server on a configured port that returns info about https requests. locallhost [flags]","title":"Synopsis"},{"location":"cmd/locallhost/#options","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for locallhost -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to","title":"Options"},{"location":"cmd/locallhost/#see-also","text":"locallhost version - Get version","title":"SEE ALSO"},{"location":"cmd/locallhost/#auto-generated-by-spf13cobra-on-18-aug-2025","text":"","title":"Auto generated by spf13/cobra on 18-Aug-2025"},{"location":"cmd/locallhost_version/","text":"locallhost version Get version Synopsis Get the current version of tool locallhost version [flags] Options -h, --help help for version Options inherited from parent commands --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to SEE ALSO locallhost - Run locallhost server Auto generated by spf13/cobra on 18-Aug-2025","title":"version"},{"location":"cmd/locallhost_version/#locallhost-version","text":"Get version","title":"locallhost version"},{"location":"cmd/locallhost_version/#synopsis","text":"Get the current version of tool locallhost version [flags]","title":"Synopsis"},{"location":"cmd/locallhost_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"cmd/locallhost_version/#options-inherited-from-parent-commands","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") -p, --port int Set http port for server to listen on (default 8080) --profiledir string directory to write pprof profile data to","title":"Options inherited from parent commands"},{"location":"cmd/locallhost_version/#see-also","text":"locallhost - Run locallhost server","title":"SEE ALSO"},{"location":"cmd/locallhost_version/#auto-generated-by-spf13cobra-on-18-aug-2025","text":"","title":"Auto generated by spf13/cobra on 18-Aug-2025"},{"location":"godoc/cmd/","text":"cmd import \"github.com/b13rg/locallhost/cmd\" Index Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp Variables RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"locallhost\", Short: \"Run locallhost server\", Long: `Start a server on a configured port that returns info about https requests.`, Run: func(cmd *cobra.Command, args []string) { server.Serve(RootConfig.Port) }, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, } func Colorize func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function. func ConfigureLogger func ConfigureLogger(debug bool) func Execute func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd. func InitConfig func InitConfig() InitConfig reads in config file and ENV variables if set. func ProfilingFinalizer func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured. func ProfilingInitializer func ProfilingInitializer() Sets up program profiling. func SetupLogger func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting. type CmdRootOptions Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File // HTTP port to listen on Port int } var RootConfig CmdRootOptions type Stamp type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"cmd"},{"location":"godoc/cmd/#cmd","text":"import \"github.com/b13rg/locallhost/cmd\"","title":"cmd"},{"location":"godoc/cmd/#index","text":"Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp","title":"Index"},{"location":"godoc/cmd/#variables","text":"RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"locallhost\", Short: \"Run locallhost server\", Long: `Start a server on a configured port that returns info about https requests.`, Run: func(cmd *cobra.Command, args []string) { server.Serve(RootConfig.Port) }, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, }","title":"Variables"},{"location":"godoc/cmd/#func-colorize","text":"func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function.","title":"func Colorize"},{"location":"godoc/cmd/#func-configurelogger","text":"func ConfigureLogger(debug bool)","title":"func ConfigureLogger"},{"location":"godoc/cmd/#func-execute","text":"func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd.","title":"func Execute"},{"location":"godoc/cmd/#func-initconfig","text":"func InitConfig() InitConfig reads in config file and ENV variables if set.","title":"func InitConfig"},{"location":"godoc/cmd/#func-profilingfinalizer","text":"func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured.","title":"func ProfilingFinalizer"},{"location":"godoc/cmd/#func-profilinginitializer","text":"func ProfilingInitializer() Sets up program profiling.","title":"func ProfilingInitializer"},{"location":"godoc/cmd/#func-setuplogger","text":"func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting.","title":"func SetupLogger"},{"location":"godoc/cmd/#type-cmdrootoptions","text":"Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File // HTTP port to listen on Port int } var RootConfig CmdRootOptions","title":"type CmdRootOptions"},{"location":"godoc/cmd/#type-stamp","text":"type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"type Stamp"},{"location":"godoc/server/","text":"server import \"github.com/b13rg/locallhost/pkg/server\" Index Variables func Serve(port int) Variables var IndexTemplateString = `<!DOCTYPE html> <!-- Based on http://locallhost.com/ - &copy; 2004-2025 Tom Anderson--> <html> <head> <title>locallhost</title> <meta name=\"keywords\" content=\"localhost, software, ip address, ip addresses, ip, http header, golang, host, tools\"> <meta charset=\"UTF-8\"> <meta name=\"description\" content=\"locallhost linker\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <style type=\"text/css\"> body { background-color: #121212; color: #e0e0e0; font-family: Verdana, Helvetica, Arial, sans-serif; font-size: 15px; text-align: center; } a { color: #81d4fa; /* Light blue for links */ text-decoration: none; } a:hover { text-decoration: underline; } input, button, select { background-color: #333; color: #fff; border: 1px solid #555; } table { background-color: #121212; border: 0; width: 15%; min-width: fit-content; margin-left: auto; margin-right: auto; } tr { background-color: #333; text-align: center; } td { font-size: 15px; text-align: center; } .title { font-size: 18px; font-weight: bold; color: white } .small { font-size: 11px; } .big { font-size: 22px; } .last { padding-bottom: 0.5em; } .center { text-align: center; } :link, :visited { text-decoration: none; color: #81d4fa } </style> <script> function genLink() { const port = document.getElementById(\"portInput\").value; const linkTextV4 = \"http://127.0.0.1:${port}\"; const linkTextV6 = \"http://[::1]:${port}\"; document.getElementById(\"linkResult\").innerHTML = \"<a href=\"${linkTextV4}\" target=\"_blank\" style=\"color: #00db54;\">${linkTextV4}</a> <br> <a href=\"${linkTextV6}\" target=\"_blank\" style=\"color: #00db54;\">${linkTextV6}</a>\"; } function copyText(elementID) { // Get the text field var copyText = document.getElementById(elementID); // Copy the text inside the text field navigator.clipboard.writeText(copyText.innerText); // Log the copied text console.log(elementID + \":\", copyText.innerText); } window.onload = genLink; </script> </head> <body class=\"center\"> <main> <span class=\"small\">Perhaps you intended to go here:</span><br> <span class=\"big\"> <a href=\"http://127.0.0.1:80/\">http://127.0.0.1:80</a> <br> <a href=\"http://[::1]:80/\">http://[::1]:80</a> </span> <br><br> <span class=\"small\">Or perhaps here:</span><br> <div class=\"big\"> <input type=\"number\" id=\"portInput\" value=\"8080\" onload=\"genLink()\" onchange=\"genLink()\"> <br> <div class=\"result\" id=\"linkResult\"></div> </div> <br> <br> <table> <tr> <td style=\"background-color: #008030;\" class=\"title\"> Your IP Address &nbsp; <button onclick=\"copyText(\"ipAddr\")\">Copy</button> </td> </tr> <tr> <td class=\"last\"> <span class=\"big\" id=\"ipAddr\">{{ .RemoteAddr }}</span> </td> </tr> </table> <br><br> <table> <tr> <td style=\"background-color: #0040b0;\" class=\"title\"> Your HTTP Request Header &nbsp; <button onclick=\"copyText(\"headers\")\">Copy</button> </td> </tr> <tr> <td class=\"last\" id=\"headers\"> <span> {{ .Method }} / {{ .Proto }} <br> {{range $key, $value := .Header }} {{$key}}: {{$value}}<br> {{ end }} </span> </td> </tr> </table> <br><br> <details> <summary>Addt'l Endpoints</summary> <div> <a href=\"/ip\">/ip</a> </div> </details> </main> <!-- footer --> <footer> <p> <a href=\"https://b13rg.icecdn.tech/\">B13rg</a> - <a href=\"https://github.com/B13rg/locallhost\">Source</a> <br> Inspired by <a href=\"http://locallhost.com\">locallhost.com</a> <br> </p> </footer> </body> </html>` func Serve func Serve(port int) Start serving on specified port. If port is \\<= 0, defaults to 8080.","title":"server"},{"location":"godoc/server/#server","text":"import \"github.com/b13rg/locallhost/pkg/server\"","title":"server"},{"location":"godoc/server/#index","text":"Variables func Serve(port int)","title":"Index"},{"location":"godoc/server/#variables","text":"var IndexTemplateString = `<!DOCTYPE html> <!-- Based on http://locallhost.com/ - &copy; 2004-2025 Tom Anderson--> <html> <head> <title>locallhost</title> <meta name=\"keywords\" content=\"localhost, software, ip address, ip addresses, ip, http header, golang, host, tools\"> <meta charset=\"UTF-8\"> <meta name=\"description\" content=\"locallhost linker\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <style type=\"text/css\"> body { background-color: #121212; color: #e0e0e0; font-family: Verdana, Helvetica, Arial, sans-serif; font-size: 15px; text-align: center; } a { color: #81d4fa; /* Light blue for links */ text-decoration: none; } a:hover { text-decoration: underline; } input, button, select { background-color: #333; color: #fff; border: 1px solid #555; } table { background-color: #121212; border: 0; width: 15%; min-width: fit-content; margin-left: auto; margin-right: auto; } tr { background-color: #333; text-align: center; } td { font-size: 15px; text-align: center; } .title { font-size: 18px; font-weight: bold; color: white } .small { font-size: 11px; } .big { font-size: 22px; } .last { padding-bottom: 0.5em; } .center { text-align: center; } :link, :visited { text-decoration: none; color: #81d4fa } </style> <script> function genLink() { const port = document.getElementById(\"portInput\").value; const linkTextV4 = \"http://127.0.0.1:${port}\"; const linkTextV6 = \"http://[::1]:${port}\"; document.getElementById(\"linkResult\").innerHTML = \"<a href=\"${linkTextV4}\" target=\"_blank\" style=\"color: #00db54;\">${linkTextV4}</a> <br> <a href=\"${linkTextV6}\" target=\"_blank\" style=\"color: #00db54;\">${linkTextV6}</a>\"; } function copyText(elementID) { // Get the text field var copyText = document.getElementById(elementID); // Copy the text inside the text field navigator.clipboard.writeText(copyText.innerText); // Log the copied text console.log(elementID + \":\", copyText.innerText); } window.onload = genLink; </script> </head> <body class=\"center\"> <main> <span class=\"small\">Perhaps you intended to go here:</span><br> <span class=\"big\"> <a href=\"http://127.0.0.1:80/\">http://127.0.0.1:80</a> <br> <a href=\"http://[::1]:80/\">http://[::1]:80</a> </span> <br><br> <span class=\"small\">Or perhaps here:</span><br> <div class=\"big\"> <input type=\"number\" id=\"portInput\" value=\"8080\" onload=\"genLink()\" onchange=\"genLink()\"> <br> <div class=\"result\" id=\"linkResult\"></div> </div> <br> <br> <table> <tr> <td style=\"background-color: #008030;\" class=\"title\"> Your IP Address &nbsp; <button onclick=\"copyText(\"ipAddr\")\">Copy</button> </td> </tr> <tr> <td class=\"last\"> <span class=\"big\" id=\"ipAddr\">{{ .RemoteAddr }}</span> </td> </tr> </table> <br><br> <table> <tr> <td style=\"background-color: #0040b0;\" class=\"title\"> Your HTTP Request Header &nbsp; <button onclick=\"copyText(\"headers\")\">Copy</button> </td> </tr> <tr> <td class=\"last\" id=\"headers\"> <span> {{ .Method }} / {{ .Proto }} <br> {{range $key, $value := .Header }} {{$key}}: {{$value}}<br> {{ end }} </span> </td> </tr> </table> <br><br> <details> <summary>Addt'l Endpoints</summary> <div> <a href=\"/ip\">/ip</a> </div> </details> </main> <!-- footer --> <footer> <p> <a href=\"https://b13rg.icecdn.tech/\">B13rg</a> - <a href=\"https://github.com/B13rg/locallhost\">Source</a> <br> Inspired by <a href=\"http://locallhost.com\">locallhost.com</a> <br> </p> </footer> </body> </html>`","title":"Variables"},{"location":"godoc/server/#func-serve","text":"func Serve(port int) Start serving on specified port. If port is \\<= 0, defaults to 8080.","title":"func Serve"}]}